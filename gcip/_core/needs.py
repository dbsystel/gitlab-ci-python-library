from typing import Dict, Union, Optional

from .job import Job


class Needs(object):
    def __init__(
        self,
        job: Union[str, Job],
        project: Optional[str] = None,
        branch: Optional[str] = None,
        artifacts: bool = True,
    ):
        """
        Class to add `needs` to :class:`Job`

        The `needs` key-word adds a possibility to allow out-of-order Gitlab CI jobs.
        A job which needed another job runs directly after `another job` as finished successfully.
        For more in depth information see `Gitlab CI Reference needs`_, `Directed Acyclic Graph`_.

        Args:
            job (Union[str, Job]): Either a :class:`Job` or a job's name in as :class:`str`.
            project (Optional[str]): Remote Gitlab Project to add the `dependency` from. Defaults to None.
            branch (Optional[str]): Branch of the remote project to depend on. Defaults to None.
            artifacts (bool): Download artifacts generated by ``job``. Defaults to True.

        Raises:
            ValueError: If ``branch`` is set but ``project`` is missing.

        .. _Gitlab CI Reference needs:
           https://docs.gitlab.com/ee/ci/yaml/#needs
        .. _Directed Acyclic Graph:
           https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
        """
        if branch and not project:
            raise ValueError("'project' is mandatory if you set 'branch'.")

        self._project = project
        self._branch = branch
        self._artifacts = artifacts

        if isinstance(job, str):
            self._job = job
        else:
            self._job = job.name

        if self._project and not self._branch:
            self._branch = "master"

    def render(self) -> Dict[str, object]:
        """Renders the :class:`Needs` object. Retruns the dictionary representation of the object"""
        rendered_needs = {
            "job": self._job,
            "artifacts": self._artifacts
        }
        if self._project:
            rendered_needs.update({
                "project": self._project,
                "branch": self._branch
            })
        return rendered_needs
