from __future__ import annotations

from typing import Dict, Union, Optional


class Need(object):
    def __init__(
        self,
        job: str,
        *,
        project: Optional[str] = None,
        ref: Optional[str] = None,
        artifacts: bool = True,
    ):
        """
        Class to add `needs` to :class:`Job`

        The `needs` key-word adds a possibility to allow out-of-order Gitlab CI jobs.
        A job which needed another job runs directly after `another job` as finished successfully.
        For more in depth information see `Gitlab CI Reference needs`_, `Directed Acyclic Graph`_.

        Args:
            job (str): A job's name as :class:`str`.
            project (Optional[str]): Remote Gitlab Project to add the `dependency` from. Defaults to None.
            ref (Optional[str]): Branch of the remote project to depend on. Defaults to None.
            artifacts (bool): Download artifacts generated by ``job``. Defaults to True.

        Raises:
            ValueError: If ``ref`` is set but ``project`` is missing.

        .. _Gitlab CI Reference needs:
           https://docs.gitlab.com/ee/ci/yaml/#needs
        .. _Directed Acyclic Graph:
           https://docs.gitlab.com/ee/ci/directed_acyclic_graph/index.html
        """
        if ref and not project:
            raise ValueError("'ref' parameter requires the 'project' parameter.")

        self._job = job
        self._project = project
        self._ref = ref
        self._artifacts = artifacts

        if self._project and not self._ref:
            self._ref = "main"

    def render(self) -> Dict[str, Union[str, bool]]:
        """
        Renders the :class:`Need` object. Returns the :obj:`dict` representation of the object
        """
        rendered_need: Dict[str, Union[str, bool]] = {
            "job": self._job,
            "artifacts": self._artifacts
        }
        if self._project and self._ref:
            rendered_need.update({
                "project": self._project,
                "ref": self._ref
            })
        return rendered_need
